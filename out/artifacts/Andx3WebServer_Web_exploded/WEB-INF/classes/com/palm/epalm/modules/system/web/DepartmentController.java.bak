
package com.palm.epalm.modules.system.web;

import com.palm.epalm.base.repository.QueryFilter;
import com.palm.epalm.modules.system.rest.vo.DepartmentVO;
import com.palm.epalm.base.util.mapper.BeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import javax.validation.Valid;
import java.util.List;
import static com.palm.epalm.base.util.ListArrayUtil.*;

@Controller
@RequestMapping("/department")
@Secured("ROLE_USER")//声明需要的权限，可用声明在方法上
public class DepartmentController{

    @Autowired
    private DepartmentService departmentService;

    private final String LIST_ACTION = "redirect:/system/department";
    /**
    @ModelAttribute
    public void init(Model model) {   //请求初始化，可以定义或者获取数据
        model.addAttribute("now", new java.sql.Timestamp(System.currentTimeMillis()));
    }**/
    /** 列表 */
    @RequestMapping
    public String index(Model model,Pageable pageable,QueryFilter []filters) {
        Page<Department> page = departmentService.findAll(newList(filters),pageable);
        model.addAttribute("page",page);
        return "/department/index";
    }

    /** 显示 */
    @RequestMapping(value="/{id}")
    public String show(Model model,@PathVariable Long id) throws Exception {
        Department department = (Department)departmentService.findOne(id);
        model.addAttribute("department",department);
        return "/department/view";
    }

    /** 进入新增 */
    @RequestMapping(value="/new")
    public String _new(Model model,Department department) throws Exception {
        model.addAttribute("department",department);
        return "/department/edit";
    }

    /** 保存新增,@Valid标注spirng在绑定对象时自动为我们验证对象属性并存放errors在BindingResult  */
    @RequestMapping(method=RequestMethod.POST)
    public String create(Model model,@Valid Department department,BindingResult errors,RedirectAttributes redirectAttributes) throws Exception {
        if(errors.hasErrors()) {
            return  "/department/edit";
        }

        departmentService.save(department);
        redirectAttributes.addFlashAttribute("sucess", "create sucess");//存放在Flash中的数据,在下一次http请求中仍然可以读取数据,error()用于显示错误消息
        return LIST_ACTION;
    }

    /** 编辑 */
    @RequestMapping(value="/{id}/edit")
    public String edit(Model model,@PathVariable Long id) throws Exception {
        Department department = (Department)departmentService.findOne(id);
        model.addAttribute("department",department);
        return "/department/edit";
    }

    /** 保存更新,@Valid标注spirng在绑定对象时自动为我们验证对象属性并存放errors在BindingResult  */
    @RequestMapping(value="/{id}",method=RequestMethod.PUT)
    public String update(Model model,@PathVariable("id") Department department,@Valid DepartmentVO departmentVO,BindingResult errors,RedirectAttributes redirectAttributes) throws Exception {
        if(errors.hasErrors()) {
            return "/department/edit";
        }
        BeanMapper.copy(departmentVO,department);//拷贝更新的属性，某些属性需要手动处理
        departmentService.save(department);
        redirectAttributes.addFlashAttribute("sucess", "update sucess");
        return LIST_ACTION;
    }

    /** 删除 */
    @RequestMapping(value="/{id}",method=RequestMethod.DELETE)
    public String delete(Model model,@PathVariable Long id,RedirectAttributes redirectAttributes) {
        departmentService.delete(id);
        redirectAttributes.addFlashAttribute("sucess", "delete sucess");
        return LIST_ACTION;
    }

    /** 批量删除 */
    @RequestMapping(method=RequestMethod.DELETE)
    public String batchDelete(Model model,@RequestParam("items")  List<Long> items, RedirectAttributes redirectAttributes) {
        departmentService.deleteByIds(items);
        redirectAttributes.addFlashAttribute("sucess", "delete sucess");
        return LIST_ACTION;
    }

}

